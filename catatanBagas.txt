
=============== INstal Laravel dan Breeze =================
1. Setelah instal laravel, instal breeze dan pakai inertia vue ikuti documentation

=============== Items ===============
2. Buat model item beserta migration dengan php artisan make:mode items -m
3. Seting migration sesuai kebutuhan
4. Pada model tambahkan protected $guard = 'id',  artinya id tidak bisa di update
5. Buat ItemController dan buat route item yang menampilkan data items
6. buat folder item untuk view vue nya di /js/page
7. buat view index.vue dan ambil data item dari controller yang sudah dibuat
    sebelum memanggil di vue kita harus mengenalkan proopsnya dulu
    <script setup>
    defineProps(
        {
            items: Array
        }
    )
    </script>

    baru panggil dengan v-for
8. Buat table sederhana untuk data item
9. Navbar kita samakan dengan halaman dashboard maka kita copas ke Items/Index dan import apa yang dicopas
    import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue';
    ikuti apa yang ada didashboar dan costum untuk view Items
10. gunakan container sama dengan dashboad agar telihat lebih rapih
11. ganti nama app di env. dan import Head inertiajs agar title bisa berubah
    import { Head } from '@inertiajs/vue3';
        <Head title="Items" />
12. tambahkan button dengan mengambil component yang sudah tersedia <PrimaryButton></PrimaryButton>
    kemudian beri a href sesuaikan dengan controller
    import PrimaryButton from '@/Components/PrimaryButton.vue';
    <PrimaryButton>
    <a href="">
    Create Item
    </a>
    </PrimaryButton>
13. Buat Routenya, View dengan navbar sama seperti Index.vue, Controllernya, tambahkan submit.prevent Pada
    pada form nya agar tidak reload tapi menjalankan function
14. Guanakan helper useForm yang ada pada inertiajs untuk function form dengan cara import dulu kemudian buat var form
    import { useForm } from '@inertiajs/vue3;'

    const form = useForm({
        name:'',
        qty: 0
        });

    buat juga variable untuk post
    const submitForm = () => {
        form.post('/items');
    };

    lalu buat route dan Controllernya
15. Jika ingin menerima pesan succes/error harus setting terlebih dahulu pada middleware handelInertia
     yang ada di App/Http/Midleware lalu tambahkan nama pesan (bisa diliah di documentation inertiajs)
     kemudia buat div untuk messagenya
     <div v-if="$page.props.flash.success" class="bg-green border border-green-400 text-black-700 py-2 px-4 rounded relative" role="alert">
                            {{ $page.props.flash.success }}
    </div>

16. Tambkan colum unit untuk keterangan data picis dengan migration
17. Tambahkan form select untuk input unit, select hasilnya/value nya ada di script kmudian di loop dan value nya diambil
    const pieces = [
    { value: 'KG', name: 'Kilograms' },
    { value: 'GRAM', name: 'Grams' },
    { value: 'LITER', name: 'Liters' },
    { value: 'ML', name: 'Milliliters' },
    { value: 'PCS', name: 'Pieces' },
    { value: 'PACK', name: 'Packs' },
    { value: 'BOX', name: 'Boxes' },
    { value: 'BOTTLE', name: 'Bottles' },
    { value: 'CAN', name: 'Cans' },
    { value: 'SACK', name: 'Sacks' },
    { value: 'BAG', name: 'Bags' },
    { value: 'SET', name: 'Sets' },
    { value: 'ROLL', name: 'Rolls' },
    { value: 'TUBE', name: 'Tubes' },
    { value: 'TRAY', name: 'Trays' },
    { value: 'BARREL', name: 'Barrels' },
    { value: 'CUP', name: 'Cups' },
    { value: 'PORTION', name: 'Portions' },
];
18. Tambahkan unit di model items
19. Buat controller untuk unit

========= Edit ===========
20. Buat route untuk edit , perlu diperhatikan untuk bind id jadi nya:
    <a :href="`/items/${item.id}/edit-unit`"

    kemudian buat view edit dan buat controllernya returun inertia serta beri props,
    kemudian defineProps({}) perhatikan type, untuk mngetahui type data pakai getType kemudian
    defineProps typenya sesuaikan
    const props = defineProps({
    item: Object,
});

    tambahkan import sesuai dan ambil value nama dan unit
    const props = defineProps({
    item: Object,
});

const form = useForm({
    name: props.item.name,
    unit: props.item.unit
});

21. buat route untuk store edit unit
        Route::patch('/items/{id}/edit-unit', [ItemController::class, 'storeEditUnit']);
22. Buat controllernya cantumkan (Request $request, $id)
       $items = Item::findOrFail($id);
        $request->validate([
            'name' => 'required|string|max:255',
            'unit' => 'required|string|max:100',
        ]);
        // dd($request->all());
        $items->update($request->all());
        return redirect()->route('item.index')->with('success', 'Item update successfully');

23. Buat Route Untuk edit stock dan buat controllernya return inertia serta beri props yang isinya item = id
24. Buat vue view nya dan import yang diperlukan lalu input name beri readonly

========= Make model and migration for stockcard ============
25. php artisan make:mode StockCard -m, atur fillable nya
26. atur migration nya perhatikan fk untuk item id, kemudia migrate

     Schema::create('stock_cards', function (Blueprint $table) {
            $table->id();
            $table->foreignId('item_id')->constrained();
            $table->double('qty');
            $table->enum('note', ['in', 'out']);
            $table->text('description');
            $table->timestamps();
        });

27. Buat controllernya beserta logika jika IN (maka +), jika OUT(maka -), dan update kedata item juga stockcard
    public function storeEditStock(Request $request, $id)
    {
        $items = Item::findOrFail($id);
        $request->validate([
            'qty' => 'required|numeric|digits_between:1,6',
            'status' => 'required|in:in,out',
            'description' => 'required|min:5|string'
        ]);

        $dataStockCard = [
            'item_id' => $items->id,
            'qty' => $request->qty,
            'status' => $request->status,
            'description' => $request->description
        ];

        if ($request->status == 'in') {
            $newQty = $items->qty + $request->qty;
        } else if($request->status == 'out'){
            if($request->qty > $items->qty){
                return redirect()->route('item.index')->with('error','stock not availible')
            }
            $newQty = $items->qty - $request->qty;
        }

        $items->update(['qty' => $newQty]);
        StockCard::create($dataStockCard);
        return redirect()->route('item.index')->with('success', 'Stock Item update successfully');
    }

28. buat View nya dan buat controllernya (perhatikan)
     public function stockcard($id)
    {
        $stockcards = StockCard::where('item_id', $id)->orderBy('created_at', 'desc')->get();
        return inertia('Items/StockCardView', [
            'items' => $stockcards
        ]);
    }

